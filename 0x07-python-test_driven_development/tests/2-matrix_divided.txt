#2-matrix_divided.py
====================


divides the whole matrixs by a specific number that is not zero.
----------------------------------------------------------------

Import the function:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Dividing matrix by 3:
    >>> matrix_divided([[3, 6, 9], [6, 12, 15]], 3)
    [[1.0, 2.0, 3.0], [2.0, 4.0, 5.0]]

Dividing matrix by a float:
    >>> matrix_divided([[3, -6, 9], [6, 8, 4]], 2.5)
    [[1.2, -2.4, 3.6], [2.4, 3.2, 1.6]]

Dividing matrix by 0:

    >>> matrix_divided([[4, 8, 3], [1, 9, 6]], 0)
    Traceback (most recent call last):
    	      ...
    ZeroDivisionError: division by zero

Passing an empty matrix:

    >>> matrix_divided([], 9.99)
    Traceback (most recent call last):
    	      ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Dividing matrix which dont have consistent no. of rows:

    >>> matrix_divided([[2, 4], [2.48, 1.1, -120, 20], [-3]], 3)
    Traceback (most recent call last):
    	      ...
    TypeError: Each row of the matrix must have the same size


Passing a tuple as an argument:

    >>> matrix_divided((7, 6.3, 2), 10)
    Traceback (most recent call last):
    	      ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Dividing a matrix which its elements are not integer or float :

    >>> matrix_divided([["keely"], ["6", "3"], ["9", "'", "1"]], 3)
    Traceback (most recent call last):
    	      ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Passing div as a list of one element:

    >>> matrix_divided([[5, 9.1], [5, 1.9]], [10])
    Traceback (most recent call last):
    	      ...
    TypeError: div must be a number

Passing div string:

    >>> matrix_divided([[4, 5], [6, 10]], "2")
    Traceback (most recent call last):
    	      ...
    TypeError: div must be a number